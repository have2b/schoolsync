generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student @map("Sinh Vien")
  Teacher @map("Giang Vien")
  Admin   @map("Quan Tri")

  @@map("VAITRO")
}

enum Gender {
  Male   @map("Nam")
  Female @map("Nu")
  Other  @map("Khac")

  @@map("GIOITINH")
}

enum Degree {
  Bachelor @map("Cu Nhan")
  Master   @map("Thac Si")
  Phd      @map("Tien Si")
  Assoc    @map("Pho Giao Su")
  Prof     @map("Giao Su")

  @@map("HOCVI")
}

model Account {
  id           Int       @id @default(autoincrement())
  username     String    @unique @map("TenTK")
  email        String    @unique @map("Email")
  password     String    @map("MatKhau")
  role         Role      @map("VaiTro")
  avatar       String?   @map("AnhDaiDien")
  isFirstLogin Boolean   @default(true) @map("LanDauDangNhap")
  createdAt    DateTime  @default(now()) @map("NgayTao")
  updatedAt    DateTime  @updatedAt @map("NgayCapNhat")
  students     Student[]
  teachers     Teacher[]

  @@map("TAIKHOAN")
}

model Student {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("MaSV")
  name      String   @map("HoTen")
  dob       DateTime @map("NgaySinh")
  gender    Gender   @default(Male) @map("GioiTinh")
  address   String   @map("DiaChi")
  phone     String   @unique @map("SDT")
  createdAt DateTime @default(now()) @map("NgayTao")
  updatedAt DateTime @updatedAt @map("NgayCapNhat")
  isActive  Boolean  @default(true) @map("DangHoatDong")

  accountId Int     @map("MaTK")
  groupId   Int     @map("MaLopHC")
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  group     Group   @relation(fields: [groupId], references: [id])
  grades    Grade[]

  @@map("SINHVIEN")
}

model Department {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("MaKhoa")
  name      String   @unique @map("TenKhoa")
  detail    String?  @map("MoTa")
  createdAt DateTime @default(now()) @map("NgayTao")
  updatedAt DateTime @updatedAt @map("NgayCapNhat")
  isActive  Boolean  @default(true) @map("DangHoatDong")

  groups   Group[]
  teachers Teacher[]

  @@map("KHOA")
}

model Group {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("MaLopHC")
  name      String   @unique @map("TenLopHC")
  capacity  Int      @map("SoLuong")
  createdAt DateTime @default(now()) @map("NgayTao")
  updatedAt DateTime @updatedAt @map("NgayCapNhat")
  isActive  Boolean  @default(true) @map("DangHoatDong")

  departmentId Int        @map("MaKhoa")
  teacherId    Int        @map("MaGV")
  department   Department @relation(fields: [departmentId], references: [id])
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  students     Student[]

  @@map("LOPHC")
}

model Course {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("MaHP")
  name      String   @unique @map("TenHP")
  credit    Int      @map("SoTC")
  lesson    Int      @map("SoTiet")
  createdAt DateTime @default(now()) @map("NgayTao")
  updatedAt DateTime @updatedAt @map("NgayCapNhat")
  isActive  Boolean  @default(true) @map("DangHoatDong")

  rosters Roster[]

  @@map("HOCPHAN")
}

model Roster {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("MaLHP")
  name      String   @map("TenLHP")
  capacity  Int      @map("SoLuong")
  semester  Int      @map("HocKy")
  year      Int      @map("NamHoc")
  startDate DateTime @map("NgayBatDau")
  endDate   DateTime @map("NgayKetThuc")
  createdAt DateTime @default(now()) @map("NgayTao")
  updatedAt DateTime @updatedAt @map("NgayCapNhat")
  isActive  Boolean  @default(true) @map("DangHoatDong")

  courseId  Int     @map("MaHP")
  teacherId Int     @map("MaGV")
  course    Course  @relation(fields: [courseId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  Grades    Grade[]

  @@map("LOPHOCPHAN")
}

model Teacher {
  id        Int      @id @default(autoincrement())
  code      String   @unique @map("MaGV")
  name      String   @map("HoTen")
  degree    Degree   @default(Bachelor) @map("HocVi")
  major     String   @map("ChuyenNganh")
  createdAt DateTime @default(now()) @map("NgayTao")
  updatedAt DateTime @updatedAt @map("NgayCapNhat")
  isActive  Boolean  @default(true) @map("DangHoatDong")

  accountId    Int        @map("MaTK")
  departmentId Int        @map("MaKhoa")
  account      Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  groups       Group[]
  rosters      Roster[]

  @@map("GIANGVIEN")
}

model Grade {
  attendancePoint Decimal  @map("DiemCC")
  midTermPoint    Decimal  @map("DiemKT1")
  finalPoint      Decimal  @map("DiemKT2")
  finalGrade      Decimal  @map("DiemTL")
  examPoint       Decimal  @map("DiemThi")
  createdAt       DateTime @default(now()) @map("NgayTao")
  updatedAt       DateTime @updatedAt @map("NgayCapNhat")
  isActive        Boolean  @default(true) @map("DangHoatDong")

  studentCode String  @map("MaSV")
  rosterCode  String  @map("MaLHP")
  student     Student @relation(fields: [studentCode], references: [code])
  roster      Roster  @relation(fields: [rosterCode], references: [code])

  @@id([studentCode, rosterCode])
  @@map("DIEM")
}
